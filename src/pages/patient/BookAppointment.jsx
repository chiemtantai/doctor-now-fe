import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "@/hooks/use-toast";
import { Calendar, Clock, User2 } from "lucide-react";
import { getAllDoctors, getAvailableSlots } from "../lib/api"; // Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt h√†m l·∫•y danh s√°ch b√°c sƒ©
import { useEffect } from "react";

const BookAppointment = () => {
  const [formData, setFormData] = useState({
    doctor: "",
    specialty: "",
    date: "",
    time: "",
    reason: ""
  });
  const navigate = useNavigate();

  const [doctors, setDoctors] = useState([]);
  const [timeSlots, setTimeSlots] = useState([]);
  const [loadingDoctors, setLoadingDoctors] = useState(true);
  const [loadingSlots, setLoadingSlots] = useState(false);
  


useEffect(() => {
  const fetchDoctors = async () => {
    try {
      const data = await getAllDoctors();
      setDoctors(data);
    } catch (err) {
      toast({
        title: "L·ªói t·∫£i danh s√°ch b√°c sƒ©",
        description: "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß",
        variant: "destructive",
      });
    } finally {
      setLoadingDoctors(false);
    }
  };

  fetchDoctors();
}, []);
useEffect(() => {
  const fetchSlots = async () => {
    if (!formData.doctor || !formData.date) return;

    console.log("üìÖ Fetching slots for:", formData);

    setLoadingSlots(true);
    try {
      const raw = await getAvailableSlots(formData.doctor, formData.date);
      const mapped = raw.map(s => ({
        id: s.slotId,
        label: s.startTime.split(" ")[1],
        ...s
      }));
      setTimeSlots(mapped);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i khung gi·ªù:", err);
      toast({ title: "L·ªói", description: "Kh√¥ng t·∫£i ƒë∆∞·ª£c khung gi·ªù" });
    } finally {
      setLoadingSlots(false);
    }
  };

  fetchSlots();
}, [formData.doctor, formData.date]);



const handleChange = (field, value) => {
  if (field === "time") {
    const selectedSlot = timeSlots.find(s => s.label === value);
    setFormData(prev => ({
      ...prev,
      time: value,
      slotId: selectedSlot?.id || ""
    }));
  } else {
    setFormData(prev => ({
      ...prev,
      [field]: value,
      ...(field === "doctor" || field === "date" ? { time: "", slotId: "" } : {})
    }));
  }
};
 

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!formData.doctor || !formData.date || !formData.time) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc",
        variant: "destructive"
      });
      return;
    }

    // Mock booking - in real app, this would call an API
    toast({
      title: "ƒê·∫∑t l·ªãch th√†nh c√¥ng",
      description: "L·ªãch kh√°m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c x√°c nh·∫≠n s·ªõm."
    });
    
    navigate("/history");
  };

  const selectedDoctor = doctors.find(d => d.id === formData.doctor);

  return (
    <div className="min-h-screen bg-medical-light">
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground mb-2">
            ƒê·∫∑t l·ªãch kh√°m
          </h1>
          <p className="text-muted-foreground">
            Ch·ªçn b√°c sƒ© v√† th·ªùi gian ph√π h·ª£p ƒë·ªÉ ƒë·∫∑t l·ªãch kh√°m
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calendar className="w-5 h-5" />
                  Th√¥ng tin ƒë·∫∑t l·ªãch
                </CardTitle>
                <CardDescription>
                  ƒêi·ªÅn th√¥ng tin ƒë·ªÉ ƒë·∫∑t l·ªãch kh√°m
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="doctor">Ch·ªçn b√°c sƒ© *</Label>
                     <Select onValueChange={(value) => handleChange("doctor", value)}>
  <SelectTrigger>
    <SelectValue placeholder="Ch·ªçn b√°c sƒ©" />
  </SelectTrigger>
  <SelectContent>
    {loadingDoctors ? (
      <p className="text-sm text-muted-foreground px-4 py-2">ƒêang t·∫£i...</p>
    ) : (
      doctors.map((doctor) => (
        <SelectItem key={doctor.id} value={doctor.id}>
          {doctor.fullName} - {doctor.specialty}
        </SelectItem>
      ))
    )}
  </SelectContent>
</Select>

                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="date">Ng√†y kh√°m *</Label>
                      <Input
                        id="date"
                        type="date"
                        value={formData.date}
                        onChange={(e) => handleChange("date", e.target.value)}
                        min={new Date().toISOString().split('T')[0]}
                        required
                      />
                    </div>
                  </div>

                 {formData.doctor && formData.date && (
  <div className="space-y-2">
    <Label>Gi·ªù kh√°m *</Label>
    <div className="grid grid-cols-3 md:grid-cols-6 gap-2">
      {timeSlots.map((slot) => (
  <Button
    key={slot.id}
    type="button"
    variant={formData.time === slot.label ? "default" : "outline"}
    size="sm"
    onClick={() => handleChange("time", slot.label)}
  >
    {slot.label}
  </Button>
))}

    </div>
  </div>
)}


                  <div className="space-y-2">
                    <Label htmlFor="reason">L√Ω do kh√°m</Label>
                    <Textarea
                      id="reason"
                      placeholder="M√¥ t·∫£ tri·ªáu ch·ª©ng ho·∫∑c l√Ω do kh√°m..."
                      value={formData.reason}
                      onChange={(e) => handleChange("reason", e.target.value)}
                      rows={3}
                    />
                  </div>

                  <Button type="submit" className="w-full" size="lg">
                    ƒê·∫∑t l·ªãch kh√°m
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>

          <div>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User2 className="w-5 h-5" />
                  Th√¥ng tin b√°c sƒ©
                </CardTitle>
              </CardHeader>
              <CardContent>
                {selectedDoctor ? (
                  <div className="space-y-4">
                    <div>
                      <p className="font-medium">{selectedDoctor.name}</p>
                      <p className="text-sm text-muted-foreground">
                        Chuy√™n khoa: {selectedDoctor.specialty}
                      </p>
                    </div>
                    
                    <div className="space-y-2">
                      <h4 className="font-medium">Th·ªùi gian l√†m vi·ªác:</h4>
                      <p className="text-sm text-muted-foreground">
                        Th·ª© 2 - Th·ª© 6: 08:00 - 11:00, 14:00 - 17:00<br />
                        Th·ª© 7: 08:00 - 11:00
                      </p>
                    </div>

                    <div className="space-y-2">
                      <h4 className="font-medium">Kinh nghi·ªám:</h4>
                      <p className="text-sm text-muted-foreground">
                        H∆°n 10 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c {selectedDoctor.specialty.toLowerCase()}
                      </p>
                    </div>
                  </div>
                ) : (
                  <p className="text-muted-foreground">
                    Vui l√≤ng ch·ªçn b√°c sƒ© ƒë·ªÉ xem th√¥ng tin
                  </p>
                )}
              </CardContent>
            </Card>

            <Card className="mt-4">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Clock className="w-5 h-5" />
                  L∆∞u √Ω
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="text-sm text-muted-foreground space-y-2">
                  <li>‚Ä¢ Vui l√≤ng ƒë·∫øn s·ªõm 15 ph√∫t tr∆∞·ªõc gi·ªù h·∫πn</li>
                  <li>‚Ä¢ Mang theo c√°c gi·∫•y t·ªù c·∫ßn thi·∫øt</li>
                  <li>‚Ä¢ C√≥ th·ªÉ h·ªßy l·ªãch h·∫πn tr∆∞·ªõc 24h</li>
                  <li>‚Ä¢ Li√™n h·ªá hotline n·∫øu c·∫ßn h·ªó tr·ª£</li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BookAppointment;